{"version":3,"sources":["pages/Signup/Signup.js","pages/Login/Login.js","pages/KakaoLogin/KakaoLogin.js","components/ChatListComponents/AddChatRoomBtn.js","components/ChatListComponents/ChatRoomPreview.js","components/ChatListComponents/ToggleBtn.js","pages/ChatList/ChatList.js","pages/Home/Home.js","pages/AddChatRoom/AddChatRoom.js","components/ChatRoomComponents/GetChatContents.js","components/ChatRoomComponents/ChatInput.js","components/ChatRoomComponents/ChatSideMenu.js","pages/ChatRoom/ChatRoom.js","pages/EmptyPage/EmptyPage.js","components/Router.js","components/App.js","index.js"],"names":["Signup","history","useHistory","useState","userId","setUserId","isUserIdNull","setIsUserIdNull","isUserIdLen","setIsUserIdLen","isUserIdDup","setIsUserIdDup","isNotUserIdDup","setIsNotUserIdDup","userIdDuplicate","a","axios","method","headers","data","username","then","res","catch","err","console","log","response","userPw","setUserPw","isUserPwNull","setIsUserPwNull","isUserPwLen","setIsUserPwLen","userPwCheck","setUserPwCheck","isUserPwCheckNull","setIsUserPwCheckNull","passwordError","setPasswordError","passwordSuccess","setPasswordSuccess","onSignupClick","e","preventDefault","password","alert","push","className","type","placeholder","required","autoFocus","value","minLength","maxLength","onChange","target","onBlur","length","onClick","to","Login","refreshLogin","userName","setUserName","inputNull","setInputNull","loginFail","setLoginFail","getUserObj","userObj","defaults","common","jwtToken","href","KakaoLogin","code","URL","window","location","searchParams","get","useEffect","getKakaoToken","replace","AddChatRoomBtn","isOnMouseOver","setIsOnMouseOver","onMouseOver","onMouseOut","ChatRoomPreview","chatRoomId","masterId","participantCount","participantState","title","refreshAllList","refreshEnterList","joinChat","onJoinSave","participant","roomId","join","pathname","state","ToggleBtn","btnImg","setbtnImg","listener","document","getElementById","scrollLeft","addEventListener","scrollBy","top","left","behavior","ChatList","allList","enterList","id","map","chatRoom","Home","AddChatRoom","onaddRoomSubmit","chatRoomTitle","onSubmit","name","GetChatContents","eventSource","undefined","getJoinData","getEventSource","joinData","EventSourcePolyfill","joinDateTime","Authorization","showChat","onmessage","JSON","parse","sender","initNoti","initsentMessage","initReceivedMessage","chatBox","querySelector","notiBox","createElement","innerHTML","getNotiMsgBox","appendChild","scrollTop","scrollHeight","sentBox","getSentMsgBox","receivedBox","getReceivedMsgBox","msg","convertTime","createDateTime","substring","close","ChatInput","inputValue","setInputValue","onSaveMsgSubmit","setJoinData","onKeyDown","keyCode","ChatSideMenu","showSideMenu","isMaster","onChatRoomDel","confirm","onChatRoomOut","onOutSave","enterUSers","setEnterUsers","enterUSer","joinId","ChatRoom","setShowSideMenu","onSideMenuClick","Number","EmptyPage","AppRouter","isLoggedin","basename","exact","path","component","App","setUserObj","setAllList","Boolean","setEnterList","obj","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7e86ab68.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Signup.css\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport default function Signup() {\r\n  const history = useHistory();\r\n\r\n  // 아이디 입력 창 관련\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [isUserIdNull, setIsUserIdNull] = useState(false);\r\n  const [isUserIdLen, setIsUserIdLen] = useState(false);\r\n  const [isUserIdDup, setIsUserIdDup] = useState(false);\r\n  const [isNotUserIdDup, setIsNotUserIdDup] = useState(false);\r\n\r\n  const onUserIdChange = (e) => {\r\n    setUserId(e.target.value);\r\n  };\r\n\r\n  const onUserIdBlur = () => {\r\n    setIsUserIdNull(userId === \"\");\r\n    setIsUserIdLen(userId.length !== 0 && userId.length < 2);\r\n    if (userId.length >= 2) {\r\n      userIdDuplicate(userId);\r\n    } else {\r\n      setIsUserIdDup(false);\r\n      setIsNotUserIdDup(false);\r\n    }\r\n  };\r\n\r\n  const userIdDuplicate = async (userId) => {\r\n    await axios(\"https://main.psblues.site/auth/duplicate\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: {\r\n        username: userId,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setIsUserIdDup(!res.data.data);\r\n        setIsNotUserIdDup(res.data.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  // 비밀번호 입력 창 관련\r\n  const [userPw, setUserPw] = useState(\"\");\r\n  const [isUserPwNull, setIsUserPwNull] = useState(false);\r\n  const [isUserPwLen, setIsUserPwLen] = useState(false);\r\n\r\n  const onUserPwChange = (e) => {\r\n    setUserPw(e.target.value);\r\n  };\r\n\r\n  const onUserPwBlur = () => {\r\n    setIsUserPwNull(userPw === \"\");\r\n    setIsUserPwLen(userPw.length !== 0 && userPw.length < 4);\r\n  };\r\n\r\n  // 비밀번호 확인 입력 창 관련\r\n  const [userPwCheck, setUserPwCheck] = useState(\"\");\r\n  const [isUserPwCheckNull, setIsUserPwCheckNull] = useState(false);\r\n  const [passwordError, setPasswordError] = useState(false);\r\n  const [passwordSuccess, setPasswordSuccess] = useState(false);\r\n\r\n  const onUserPwCheckChange = (e) => {\r\n    setUserPwCheck(e.target.value);\r\n  };\r\n\r\n  const onPWCheckBlur = () => {\r\n    setIsUserPwCheckNull(userPwCheck === \"\");\r\n    setPasswordError(userPwCheck !== userPw);\r\n    setPasswordSuccess(userPwCheck === userPw);\r\n    if (userPwCheck === \"\") {\r\n      setPasswordError(false);\r\n      setPasswordSuccess(false);\r\n    }\r\n  };\r\n\r\n  // 회원가입 버튼 클릭 시\r\n  const onSignupClick = async (e) => {\r\n    e.preventDefault();\r\n    setIsUserIdNull(userId === \"\");\r\n    setIsUserPwNull(userPw === \"\");\r\n    setIsUserPwCheckNull(userPwCheck === \"\");\r\n    setPasswordError(userPwCheck !== userPw);\r\n    if (\r\n      !isUserIdNull &&\r\n      !isUserIdLen &&\r\n      isNotUserIdDup &&\r\n      !isUserPwNull &&\r\n      !isUserPwLen &&\r\n      !isUserPwCheckNull &&\r\n      !passwordError\r\n    ) {\r\n      await axios(\"https://main.psblues.site/auth/signup\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        data: {\r\n          username: userId,\r\n          password: userPw,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          alert(\"환영합니다.\");\r\n          history.push(\"/\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"SignupContainer\">\r\n      <h1 className=\"Signuptitle\">회원가입</h1>\r\n      <form className=\"SignupForm\">\r\n        <div className=\"SignupUserId\">\r\n          <label>아이디</label>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"사용할 아이디를 입력하세요\"\r\n            required\r\n            autoFocus\r\n            value={userId}\r\n            minLength=\"2\"\r\n            maxLength=\"20\"\r\n            onChange={onUserIdChange}\r\n            onBlur={onUserIdBlur}\r\n          />\r\n          {isUserIdNull && <div className=\"Warning\">필수 정보입니다.</div>}\r\n          {isUserIdLen && <div className=\"Warning\">2~20자만 가능합니다.</div>}\r\n          {isUserIdDup && (\r\n            <div className=\"Warning\">이미 사용중인 아이디입니다.</div>\r\n          )}\r\n          {isNotUserIdDup && (\r\n            <div className=\"Success\">사용 가능한 아이디입니다.</div>\r\n          )}\r\n        </div>\r\n        <div className=\"SignupUserPw\">\r\n          <label>비밀번호</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"사용할 비밀번호를 입력하세요\"\r\n            required\r\n            value={userPw}\r\n            minLength=\"4\"\r\n            maxLength=\"16\"\r\n            onChange={onUserPwChange}\r\n            onBlur={onUserPwBlur}\r\n          />\r\n          {isUserPwNull && <div className=\"Warning\">필수 정보입니다.</div>}\r\n          {isUserPwLen && <div className=\"Warning\">4~16자만 가능합니다.</div>}\r\n          <label>비밀번호 재확인</label>\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"사용할 비밀번호를 재입력하세요\"\r\n            required\r\n            value={userPwCheck}\r\n            minLength=\"4\"\r\n            maxLength=\"16\"\r\n            onChange={onUserPwCheckChange}\r\n            onBlur={onPWCheckBlur}\r\n          />\r\n          {isUserPwCheckNull && <div className=\"Warning\">필수 정보입니다.</div>}\r\n          {passwordError && (\r\n            <div className=\"Warning\">비밀번호가 일치하지 않습니다.</div>\r\n          )}\r\n          {passwordSuccess && (\r\n            <div className=\"Success\">비밀번호가 일치합니다.</div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          <button className=\"SignupBtn\" type=\"submit\" onClick={onSignupClick}>\r\n            회원가입\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <Link to=\"/\" className=\"toLoginBtn\">\r\n        로그인\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Login.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function Login({ refreshLogin }) {\r\n  // 아이디 입력창 관련\r\n  const [userName, setUserName] = useState(\"\");\r\n\r\n  const onUserNameChange = (e) => {\r\n    setUserName(e.target.value);\r\n    setInputNull(false);\r\n  };\r\n\r\n  // 비밀번호 입력 창 관련\r\n  const [userPw, setUserPw] = useState(\"\");\r\n\r\n  const onUserPwChange = (e) => {\r\n    setUserPw(e.target.value);\r\n    setInputNull(false);\r\n  };\r\n\r\n  // 로그인 버튼 클릭 시\r\n  const [inputNull, setInputNull] = useState(false);\r\n  const [loginFail, setLoginFail] = useState(false);\r\n\r\n  const onLoginClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (userName === \"\" || userPw === \"\") {\r\n      setInputNull(!userName || !userPw);\r\n      setLoginFail(false);\r\n    } else {\r\n      getUserObj();\r\n    }\r\n  };\r\n\r\n  const getUserObj = async () => {\r\n    await axios(\"https://main.psblues.site/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      data: {\r\n        username: userName,\r\n        password: userPw,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        const userObj = res.data;\r\n        refreshLogin(userObj);\r\n        axios.defaults.headers.common[\"Authorization\"] = `${userObj.jwtToken}`;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        setInputNull(false);\r\n        setLoginFail(true);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"loginContainer\">\r\n      <h1 className=\"title\">AllChat</h1>\r\n      <form className=\"loginForm\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"loginInput\"\r\n          placeholder=\"ID\"\r\n          required\r\n          autoFocus\r\n          value={userName}\r\n          onChange={onUserNameChange}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          className=\"loginInput\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={userPw}\r\n          onChange={onUserPwChange}\r\n        />\r\n        {inputNull && (\r\n          <div className=\"Warning\">아이디와 비밀번호를 입력해주세요.</div>\r\n        )}\r\n        {loginFail && (\r\n          <div className=\"Warning\">\r\n            아이디 또는 비밀번호가 잘못 입력 되었습니다. <br />\r\n            <b>아이디</b>와 <b>비밀번호</b>를 정확히 입력해 주세요.\r\n          </div>\r\n        )}\r\n\r\n        <button className=\"loginBtn\" type=\"submit\" onClick={onLoginClick}>\r\n          로그인\r\n        </button>\r\n        <a\r\n          className=\"KakaoLoginBtn\"\r\n          href={`https://kauth.kakao.com/oauth/authorize?client_id=3e716bc2780a7b5fe1da319c4487c6f9&redirect_uri=https://jseo9732.github.io/allchat-front/kakaologin&response_type=code`}\r\n        >\r\n          <i className=\"fas fa-comment\"></i>\r\n          <div>카카오 로그인</div>\r\n        </a>\r\n      </form>\r\n      <Link to=\"/signup\" className=\"toSignupBtn\">\r\n        회원가입\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./KakaoLogin.css\";\r\n\r\nexport default function KakaoLogin({ refreshLogin }) {\r\n  const code = new URL(window.location.href).searchParams.get(\"code\");\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    console.log(code);\r\n    const getKakaoToken = async () => {\r\n      await axios(`https://main.psblues.site/login/kakao?code=${code}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/x-www-form-urlencoded;charset=utf-8\",\r\n        },\r\n      })\r\n        .then((res) => {\r\n          const userObj = res.data.data;\r\n          refreshLogin(userObj);\r\n          axios.defaults.headers.common[\r\n            \"Authorization\"\r\n          ] = `${userObj.jwtToken}`;\r\n          history.replace(\"/\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err.response);\r\n        });\r\n    };\r\n\r\n    getKakaoToken();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"KakaoLoginContainer\">\r\n      <div className=\"KakaoLogin\">카카오 로그인 중입니다.</div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./AddChatRoomBtn.css\";\r\n\r\nexport default function AddChatRoomBtn() {\r\n  const history = useHistory();\r\n  const [isOnMouseOver, setIsOnMouseOver] = useState(false);\r\n  const onMouseOver = () => {\r\n    setIsOnMouseOver(true);\r\n  };\r\n  const onMouseOut = () => {\r\n    setIsOnMouseOver(false);\r\n  };\r\n  const onChatAddClick = () => {\r\n    history.push(\"/addChatRoom\");\r\n  };\r\n  return (\r\n    <i\r\n      className={\r\n        isOnMouseOver\r\n          ? \"fas fa-comment-medical addChatIcon active\"\r\n          : \"fas fa-comment-medical addChatIcon\"\r\n      }\r\n      onClick={onChatAddClick}\r\n      onMouseOver={onMouseOver}\r\n      onMouseOut={onMouseOut}\r\n    ></i>\r\n  );\r\n}\r\n","import \"./ChatRoomPreview.css\";\r\nimport axios from \"axios\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ChatRoomPreview({\r\n  chatRoomId,\r\n  masterId,\r\n  participantCount,\r\n  participantState,\r\n  title,\r\n  userId,\r\n  jwtToken,\r\n  refreshAllList,\r\n  refreshEnterList,\r\n}) {\r\n  // 1. 채팅 참여 요청\r\n  const joinChat = async () => {\r\n    await axios(\"https://main.psblues.site/joins\", {\r\n      method: \"POST\",\r\n      data: {\r\n        userId: userId,\r\n        chatRoomId: chatRoomId,\r\n      },\r\n    }).then((res) => {\r\n      refreshAllList();\r\n      refreshEnterList();\r\n      // 2. 채팅방 입장 시간 조회\r\n      axios\r\n        .get(\r\n          `https://main.psblues.site/chatrooms/${chatRoomId}/joins/time?userId=${userId}`\r\n        )\r\n        .then((res) => {\r\n          onJoinSave(res.data.data.username);\r\n        });\r\n    });\r\n  };\r\n\r\n  // 3. 참여 메세지 저장\r\n  const onJoinSave = async (username) => {\r\n    await axios(\"https://chatting.psblues.site/chats/notifications\", {\r\n      method: \"POST\",\r\n      data: {\r\n        participant: username,\r\n        roomId: chatRoomId,\r\n        join: true,\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Link\r\n      to={\r\n        participantState\r\n          ? {\r\n              pathname: `/chatRoom/${chatRoomId}`,\r\n              state: {\r\n                chatRoomId,\r\n                masterId,\r\n                participantCount,\r\n                title,\r\n                userId,\r\n                jwtToken,\r\n              },\r\n              refreshAllList,\r\n              refreshEnterList,\r\n            }\r\n          : \"\"\r\n      }\r\n      className=\"chatContainer\"\r\n    >\r\n      <div className=\"chatNum\">{participantCount}</div>\r\n      <div className=\"chatTitle\">{title}</div>\r\n      {!participantState && (\r\n        <button className=\"enterBtn\" onClick={joinChat}>\r\n          참여\r\n        </button>\r\n      )}\r\n    </Link>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport \"./ToggleBtn.css\";\r\n\r\nexport default function ToggleBtn({ refreshAllList, refreshEnterList }) {\r\n  const [btnImg, setbtnImg] = useState(false);\r\n\r\n  const listener = () => {\r\n    setbtnImg(document.getElementById(\"slider\").scrollLeft > 200);\r\n  };\r\n  useEffect(() => {\r\n    document.getElementById(\"slider\").addEventListener(\"scroll\", listener);\r\n  }, []);\r\n\r\n  const onAllChatClick = () => {\r\n    refreshAllList();\r\n    document.getElementById(\"slider\").scrollBy({\r\n      top: 0,\r\n      left: -410,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n  const onEnterChatClick = () => {\r\n    refreshEnterList();\r\n    document.getElementById(\"slider\").scrollBy({\r\n      top: 0,\r\n      left: 410,\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"toggleBtnContainer\">\r\n      <div className=\"allChatBtn\" onClick={onAllChatClick}>\r\n        {btnImg ? (\r\n          <i className=\"far fa-comment ChatBtnImg\"></i>\r\n        ) : (\r\n          <i className=\"fas fa-comment ChatBtnImg\"></i>\r\n        )}\r\n        <div>전체 채팅</div>\r\n      </div>\r\n      <div className=\"enterChatBtn\" onClick={onEnterChatClick}>\r\n        {btnImg ? (\r\n          <i className=\"fas fa-comments ChatBtnImg\"></i>\r\n        ) : (\r\n          <i className=\"far fa-comments ChatBtnImg\"></i>\r\n        )}\r\n        <div>참여 채팅</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./ChatList.css\";\r\nimport AddChatRoomBtn from \"../../components/ChatListComponents/AddChatRoomBtn\";\r\nimport ChatRoomPreview from \"../../components/ChatListComponents/ChatRoomPreview\";\r\nimport ToggleBtn from \"../../components/ChatListComponents/ToggleBtn\";\r\n\r\nexport default function ChatList({\r\n  userObj: { userId, jwtToken },\r\n  allList,\r\n  refreshAllList,\r\n  enterList,\r\n  refreshEnterList,\r\n}) {\r\n  useEffect(() => {\r\n    refreshAllList();\r\n    refreshEnterList();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatListContainer\">\r\n        <div className=\"TitleContainer\">\r\n          <Link\r\n            to=\"/\"\r\n            className=\"chatListTitle\"\r\n            onClick={() => {\r\n              refreshAllList();\r\n              refreshEnterList();\r\n            }}\r\n          >\r\n            채팅\r\n          </Link>\r\n          <AddChatRoomBtn />\r\n        </div>\r\n        <div id=\"slider\" className=\"rowChatListContainer\">\r\n          <div className=\"allchatList\">\r\n            {allList.map((chatRoom) => {\r\n              return (\r\n                <ChatRoomPreview\r\n                  key={chatRoom.chatRoomId}\r\n                  chatRoomId={chatRoom.chatRoomId}\r\n                  masterId={chatRoom.masterId}\r\n                  participantCount={chatRoom.participantCount}\r\n                  participantState={chatRoom.participantState}\r\n                  title={chatRoom.title}\r\n                  userId={userId}\r\n                  jwtToken={jwtToken}\r\n                  refreshAllList={refreshAllList}\r\n                  refreshEnterList={refreshEnterList}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n          <div className=\"enterchatList\">\r\n            {enterList.map((chatRoom) => {\r\n              return (\r\n                <ChatRoomPreview\r\n                  key={chatRoom.chatRoomId}\r\n                  chatRoomId={chatRoom.chatRoomId}\r\n                  masterId={chatRoom.masterId}\r\n                  participantCount={chatRoom.participantCount}\r\n                  participantState={chatRoom.participantState}\r\n                  title={chatRoom.title}\r\n                  userId={userId}\r\n                  jwtToken={jwtToken}\r\n                  refreshAllList={refreshAllList}\r\n                  refreshEnterList={refreshEnterList}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        <ToggleBtn\r\n          refreshAllList={refreshAllList}\r\n          refreshEnterList={refreshEnterList}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport \"./Home.css\";\r\n\r\nexport default function Home({\r\n  userObj,\r\n  refreshLogin,\r\n  refreshAllList,\r\n  refreshEnterList,\r\n}) {\r\n  const onLogoutClick = () => {\r\n    refreshLogin(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshAllList();\r\n    refreshEnterList();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"homeContainer\">\r\n        <button className=\"LogoutBtn\" onClick={onLogoutClick}>\r\n          로그아웃\r\n        </button>\r\n        <div className=\"homeTitle\">AllChat</div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useHistory } from \"react-router\";\r\nimport \"./AddChatRoom.css\";\r\nimport axios from \"axios\";\r\n\r\nexport default function AddChatRoom({\r\n  userObj,\r\n  refreshAllList,\r\n  refreshEnterList,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  const onBackClick = () => {\r\n    refreshAllList();\r\n    refreshEnterList();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const onaddRoomSubmit = async (e) => {\r\n    e.preventDefault();\r\n    axios(\"https://main.psblues.site/chatrooms\", {\r\n      method: \"POST\",\r\n      data: {\r\n        masterId: userObj.userId,\r\n        title: e.target.chatRoomTitle.value,\r\n      },\r\n    }).then(() => {\r\n      refreshAllList();\r\n      refreshEnterList();\r\n      history.push(\"/\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"AddChatRoomContainer\">\r\n        <div className=\"AddChatRoomTopBar\">\r\n          <div className=\"AddChatRoomImgContainer\">\r\n            <i\r\n              className=\"fas fa-chevron-left AddChatRoomImg\"\r\n              onClick={onBackClick}\r\n            ></i>\r\n          </div>\r\n          <div className=\"AddChatRoomTitle\">새로운 채팅</div>\r\n        </div>\r\n        <form className=\"AddChatRoomForm\" onSubmit={onaddRoomSubmit}>\r\n          <input\r\n            name=\"chatRoomTitle\"\r\n            className=\"AddChatRoomInput\"\r\n            type=\"text\"\r\n            placeholder=\"방 이름을 입력하세요.\"\r\n            required\r\n          />\r\n          <input className=\"AddChatRoomBtn\" type=\"submit\" value=\"만들기\" />\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { EventSourcePolyfill } from \"event-source-polyfill\";\r\nimport \"./GetChatContents.css\";\r\n\r\nexport default function GetChatContents({ chatRoomId, userId, jwtToken }) {\r\n  let eventSource = undefined;\r\n\r\n  const getJoinData = async () => {\r\n    await axios\r\n      .get(\r\n        `https://main.psblues.site/chatrooms/${chatRoomId}/joins/time?userId=${userId}`\r\n      )\r\n      .then((res) => {\r\n        getEventSource(res.data.data);\r\n      });\r\n  };\r\n\r\n  const getEventSource = (joinData) => {\r\n    eventSource = new EventSourcePolyfill(\r\n      `https://chatting.psblues.site/chatRooms/${chatRoomId}/chats?username=${joinData.username}&joinDateTime=${joinData.joinDateTime}`,\r\n      {\r\n        headers: {\r\n          Authorization: jwtToken,\r\n        },\r\n      }\r\n    );\r\n    showChat(eventSource, joinData);\r\n  };\r\n\r\n  const showChat = (eventSource, joinData) => {\r\n    // SSE 연결하기\r\n    eventSource.onmessage = (e) => {\r\n      const data = JSON.parse(e.data);\r\n      if (data.sender === null) {\r\n        // 입퇴장알림\r\n        initNoti(data);\r\n      } else if (data.sender === joinData.username) {\r\n        //파란박스(오른쪽)\r\n        initsentMessage(data);\r\n      } else {\r\n        // 회색 박스(왼쪽)\r\n        initReceivedMessage(data);\r\n      }\r\n    };\r\n  };\r\n\r\n  // 입퇴장 알림 초기화하기\r\n  const initNoti = (data) => {\r\n    const chatBox = document.querySelector(\"#chat-box\");\r\n\r\n    const notiBox = document.createElement(\"div\");\r\n    notiBox.className = \"NotiBox\";\r\n    notiBox.innerHTML = getNotiMsgBox(data);\r\n\r\n    chatBox.appendChild(notiBox);\r\n\r\n    //스크롤 따라가기\r\n    document.getElementById(\"chat-box\").scrollTop =\r\n      document.getElementById(\"chat-box\").scrollHeight;\r\n  };\r\n\r\n  //파란박스 초기화하기\r\n  const initsentMessage = (data) => {\r\n    const chatBox = document.querySelector(\"#chat-box\");\r\n\r\n    const sentBox = document.createElement(\"div\");\r\n    sentBox.className = \"sent_box\";\r\n    sentBox.innerHTML = getSentMsgBox(data);\r\n\r\n    chatBox.appendChild(sentBox);\r\n\r\n    //스크롤 따라가기\r\n    document.getElementById(\"chat-box\").scrollTop =\r\n      document.getElementById(\"chat-box\").scrollHeight;\r\n  };\r\n\r\n  //회색박스 초기화하기\r\n  const initReceivedMessage = (data) => {\r\n    const chatBox = document.querySelector(\"#chat-box\");\r\n\r\n    const receivedBox = document.createElement(\"div\");\r\n    receivedBox.className = \"received_box\";\r\n    receivedBox.innerHTML = getReceivedMsgBox(data);\r\n\r\n    chatBox.appendChild(receivedBox);\r\n\r\n    //스크롤 따라가기\r\n    document.getElementById(\"chat-box\").scrollTop =\r\n      document.getElementById(\"chat-box\").scrollHeight;\r\n  };\r\n\r\n  //입퇴장 박스 만들기\r\n  const getNotiMsgBox = (data) => {\r\n    return `<p>${data.msg}</p>`;\r\n  };\r\n\r\n  //파란 박스 만들기\r\n  const getSentMsgBox = (data) => {\r\n    const sentDate = data.createDateTime.substring(5, 10);\r\n    const sentTime = data.createDateTime.substring(11, 16);\r\n    const convertTime = sentDate + \" | \" + sentTime;\r\n\r\n    return `<div class=\"sent_msg\">\r\n              <p>${data.msg}</p>\r\n              <span class=\"date_time\">${convertTime}</span>\r\n            </div>`;\r\n  };\r\n\r\n  //회색 박스 만들기\r\n  const getReceivedMsgBox = (data) => {\r\n    const ReceivedDate = data.createDateTime.substring(5, 10);\r\n    const Receivedtime = data.createDateTime.substring(11, 16);\r\n    const convertTime = ReceivedDate + \" | \" + Receivedtime;\r\n\r\n    return `<div class=\"received_msg\">\r\n              <b>${data.sender}</b>\r\n              <p>${data.msg}</p>\r\n              <span class=\"date_time\">${convertTime}</span>\r\n            </div>`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    getJoinData();\r\n\r\n    return () => {\r\n      eventSource.close();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chatRoomId]);\r\n\r\n  return (\r\n    <div className=\"chatContents\">\r\n      <div id=\"chat-box\"></div>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport \"./ChatInput.css\";\r\n\r\nexport default function ChatInput({ chatRoomId, userId }) {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const onInputChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n  // 채팅 메세지 저장\r\n  const onSaveMsgSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await axios(`https://chatting.psblues.site/chats`, {\r\n      method: \"POST\",\r\n      data: {\r\n        msg: inputValue,\r\n        sender: joinData.username,\r\n        roomId: chatRoomId,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        setInputValue(\"\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const onEnterKeyDown = (e) => {\r\n    if (e.keyCode === 13) {\r\n      onSaveMsgSubmit(e);\r\n    }\r\n  };\r\n\r\n  const [joinData, setJoinData] = useState([]);\r\n  useEffect(() => {\r\n    // 채팅방 입장 시간 조회\r\n    axios\r\n      .get(\r\n        `https://main.psblues.site/chatrooms/${chatRoomId}/joins/time?userId=${userId}`\r\n      )\r\n      .then((res) => {\r\n        setJoinData(res.data.data);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [chatRoomId]);\r\n\r\n  return (\r\n    <div className=\"chatInputContainer\">\r\n      <form className=\"chatInputForm\" onSubmit={onSaveMsgSubmit}>\r\n        <textarea\r\n          name=\"chatValue\"\r\n          id=\"chatValue\"\r\n          className=\"chatInput\"\r\n          type=\"text\"\r\n          autoFocus\r\n          value={inputValue}\r\n          onChange={onInputChange}\r\n          onKeyDown={onEnterKeyDown}\r\n        />\r\n        <button id=\"submitBtn\" className=\"inputBtn\" type=\"submit\">\r\n          전송\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport \"./ChatSideMenu.css\";\r\n\r\nexport default function ChatSideMenu({\r\n  showSideMenu,\r\n  chatRoomId,\r\n  userId,\r\n  jwtToken,\r\n  isMaster,\r\n  refreshAllList,\r\n  refreshEnterList,\r\n}) {\r\n  const history = useHistory();\r\n\r\n  // 채팅방 삭제\r\n  const onChatRoomDel = async () => {\r\n    if (window.confirm(\"채팅방을 삭제하시겠습니까?\") === true) {\r\n      await axios(`https://main.psblues.site/chatrooms/${chatRoomId}`, {\r\n        method: \"DELETE\",\r\n      }).then((res) => {\r\n        refreshAllList();\r\n        refreshEnterList();\r\n        history.push(\"/\");\r\n      });\r\n    }\r\n  };\r\n\r\n  // 채팅방 나가기\r\n  const onChatRoomOut = async () => {\r\n    if (window.confirm(\"채팅방을 나가시겠습니까?\") === true) {\r\n      await axios(`https://main.psblues.site/joins`, {\r\n        method: \"DELETE\",\r\n        data: {\r\n          userId: userId,\r\n          chatRoomId: chatRoomId,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          onOutSave();\r\n          refreshAllList();\r\n          refreshEnterList();\r\n          history.push(\"/\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  // 퇴장 메세지 저장\r\n  const onOutSave = async () => {\r\n    await axios(\"https://chatting.psblues.site/chats/notifications\", {\r\n      method: \"POST\",\r\n      data: {\r\n        participant: joinData.username,\r\n        roomId: chatRoomId,\r\n        join: false,\r\n      },\r\n    });\r\n  };\r\n\r\n  const [enterUSers, setEnterUsers] = useState([]);\r\n  const [joinData, setJoinData] = useState([]);\r\n  useEffect(() => {\r\n    if (showSideMenu) {\r\n      axios(`https://main.psblues.site/chatrooms/${chatRoomId}/joins`, {\r\n        method: \"GET\",\r\n      }).then((res) => {\r\n        setEnterUsers(res.data.data);\r\n      });\r\n\r\n      axios\r\n        .get(\r\n          `https://main.psblues.site/chatrooms/${chatRoomId}/joins/time?userId=${userId}`\r\n        )\r\n        .then((res) => {\r\n          setJoinData(res.data.data);\r\n        });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [showSideMenu, chatRoomId]);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        showSideMenu ? \"sideMenuContainer active\" : \"sideMenuContainer\"\r\n      }\r\n    >\r\n      <div className=\"sideMenu\">\r\n        <div className=\"chatMemberContainer\">\r\n          <div className=\"chatMemberTitle\">대화 상대</div>\r\n          <div className=\"chatMemberBox\">\r\n            {showSideMenu &&\r\n              enterUSers.map((enterUSer) => {\r\n                return (\r\n                  <div key={enterUSer.joinId} className=\"chatMember\">\r\n                    {enterUSer.username}\r\n                  </div>\r\n                );\r\n              })}\r\n          </div>\r\n        </div>\r\n        <div className=\"btnBox\">\r\n          {isMaster ? (\r\n            <button onClick={onChatRoomDel}>채팅방 삭제</button>\r\n          ) : (\r\n            <button onClick={onChatRoomOut}>나가기</button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport GetChatContents from \"../../components/ChatRoomComponents/GetChatContents\";\r\nimport ChatInput from \"../../components/ChatRoomComponents/ChatInput\";\r\nimport ChatSideMenu from \"../../components/ChatRoomComponents/ChatSideMenu\";\r\nimport \"./ChatRoom.css\";\r\n\r\nexport default function ChatRoom({\r\n  location: {\r\n    state: { chatRoomId, masterId, participantCount, title, userId, jwtToken },\r\n    refreshAllList,\r\n    refreshEnterList,\r\n  },\r\n}) {\r\n  const history = useHistory();\r\n\r\n  const onBackClick = () => {\r\n    history.push(\"/\");\r\n    refreshAllList();\r\n    refreshEnterList();\r\n  };\r\n\r\n  const [showSideMenu, setShowSideMenu] = useState(false);\r\n  const onSideMenuClick = () => {\r\n    setShowSideMenu(!showSideMenu);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"chatRoomContainer\">\r\n        <div className=\"chatRoomTopBar\">\r\n          <div className=\"chatRoomImgContainer\">\r\n            <i\r\n              className=\"fas fa-chevron-left chatRoomImg\"\r\n              onClick={onBackClick}\r\n            ></i>\r\n          </div>\r\n          <div className=\"chatRoomTitleContainer\">\r\n            <span className=\"chatRoomTitle\">{title}</span>\r\n            <span className=\"chatRoomNum\">({participantCount})</span>\r\n          </div>\r\n          <div className=\"chatRoomImgContainer\">\r\n            {showSideMenu ? (\r\n              <i\r\n                className=\"fas fa-times chatRoomImg\"\r\n                onClick={onSideMenuClick}\r\n              ></i>\r\n            ) : (\r\n              <i\r\n                className=\"fas fa-bars chatRoomImg\"\r\n                onClick={onSideMenuClick}\r\n              ></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"sideMenuFlex\">\r\n          {showSideMenu && (\r\n            <div onClick={onSideMenuClick} className=\"sideMenuBlank\"></div>\r\n          )}\r\n          <GetChatContents\r\n            chatRoomId={chatRoomId}\r\n            userId={userId}\r\n            jwtToken={jwtToken}\r\n          />\r\n          <ChatInput chatRoomId={chatRoomId} userId={userId} />\r\n          <ChatSideMenu\r\n            showSideMenu={showSideMenu}\r\n            chatRoomId={chatRoomId}\r\n            userId={userId}\r\n            jwtToken={jwtToken}\r\n            isMaster={masterId === Number(userId)}\r\n            refreshAllList={refreshAllList}\r\n            refreshEnterList={refreshEnterList}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import { Link } from \"react-router-dom\";\r\nimport \"./EmptyPage.css\";\r\n\r\nexport default function EmptyPage() {\r\n  return (\r\n    <div className=\"EmptyPage\">\r\n      <h2>잘못된 접근입니다.</h2>\r\n      <Link to=\"/\">돌아가기</Link>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport {\r\n  Signup,\r\n  Login,\r\n  KakaoLogin,\r\n  ChatList,\r\n  Home,\r\n  AddChatRoom,\r\n  ChatRoom,\r\n  EmptyPage,\r\n} from \"../pages/PagesIndex\";\r\n\r\nexport default function AppRouter({\r\n  isLoggedin,\r\n  userObj,\r\n  refreshLogin,\r\n  allList,\r\n  refreshAllList,\r\n  enterList,\r\n  refreshEnterList,\r\n}) {\r\n  return (\r\n    <>\r\n      <BrowserRouter basename=\"/allchat-front/\">\r\n        {isLoggedin ? (\r\n          <>\r\n            <div className=\"firstContainer\">\r\n              <ChatList\r\n                userObj={userObj}\r\n                allList={allList}\r\n                refreshAllList={refreshAllList}\r\n                enterList={enterList}\r\n                refreshEnterList={refreshEnterList}\r\n              />\r\n              <Switch>\r\n                <Route exact path=\"/\">\r\n                  <Home\r\n                    userObj={userObj}\r\n                    refreshLogin={refreshLogin}\r\n                    refreshAllList={refreshAllList}\r\n                    refreshEnterList={refreshEnterList}\r\n                  />\r\n                </Route>\r\n                <Route path=\"/addChatRoom\">\r\n                  <AddChatRoom\r\n                    userObj={userObj}\r\n                    refreshAllList={refreshAllList}\r\n                    refreshEnterList={refreshEnterList}\r\n                  />\r\n                </Route>\r\n                <Route path=\"/chatRoom/:chatRoomId\" component={ChatRoom} />\r\n                <Route component={EmptyPage} />\r\n              </Switch>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Login refreshLogin={refreshLogin} />\r\n              </Route>\r\n              <Route path=\"/kakaologin/:code\">\r\n                <KakaoLogin refreshLogin={refreshLogin} />\r\n              </Route>\r\n              <Route path=\"/signup\" component={Signup} />\r\n              <Route component={EmptyPage} />\r\n            </Switch>\r\n          </>\r\n        )}\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport axios from \"axios\";\r\nimport AppRouter from \"./Router\";\r\n\r\nexport default function App() {\r\n  const [userObj, setUserObj] = useState(null);\r\n  const refreshLogin = (obj) => {\r\n    setUserObj(obj);\r\n  };\r\n\r\n  const [allList, setAllList] = useState([]);\r\n  const refreshAllList = async () => {\r\n    if (Boolean(userObj)) {\r\n      await axios.get(`https://main.psblues.site/chatrooms`).then((res) => {\r\n        setAllList(res.data.data);\r\n      });\r\n      // .catch((err) => {\r\n      //   if (err.response.data.error === \"Unauthorized\") {\r\n      //     alert(\"로그인 후 다시 이용해주세요\");\r\n      //   } else {\r\n      //     console.log(err.response);\r\n      //   }\r\n      // });\r\n    }\r\n  };\r\n  const [enterList, setEnterList] = useState([]);\r\n  const refreshEnterList = async () => {\r\n    if (Boolean(userObj)) {\r\n      await axios\r\n        .get(`https://main.psblues.site/chatrooms/participating`)\r\n        .then((res) => {\r\n          setEnterList(res.data.data);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppRouter\r\n      isLoggedin={Boolean(userObj)}\r\n      userObj={userObj}\r\n      refreshLogin={refreshLogin}\r\n      allList={allList}\r\n      refreshAllList={refreshAllList}\r\n      enterList={enterList}\r\n      refreshEnterList={refreshEnterList}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}